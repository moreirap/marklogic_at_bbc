Thanks for looking at this library. This file will help you with integrating it into your project. Have a look at the included screenshot for a visual aid of an end result application using only Versi and search-ui.

Please note:
- The search-ui function namespace prefix in these examples is "sdis:".
- Search pages that use search-ui must be called search.xqy, or you will have to change the references in the library.

-------------

Here's how one might use the widgets in search-ui on a search.xqy page:

let $search := (dis:search-results($params))
let $sidebar := (sdis:search-filter($params), sdis:sort($params), dis:search-facets($params))
let $content := (
    dis:search-results-analysis($params),    
    page:two-column( "sidebar", $search, $sidebar) )

return page:output($params, $page-info, $content)

-------------

Here's how one might use the search features in search-ui in a display.xqy module:

define function search-results($params as element(params)) as element()*
{
	let $page := if (($params/p) and fn:not(fn:empty($params/p))) then xs:integer($params/p) else 1
	let $items-per-page := if ($params/i) then xs:integer($params/i) else $ITEMS-PER-PAGE
	let $start := (($page - 1) * $items-per-page) + 1
	let $end := $page * $items-per-page
	
	let $query := sdis:params-to-query($params) 
	let $start-time := xdmp:query-meters()/qm:elapsed-time
	let $results := search:search-results($query, xs:integer($start), xs:integer($end))
	let $end-time := xdmp:query-meters()/qm:elapsed-time
	let $count as xs:integer := search:search-count($query)
	let $page-info := uit:page-info($page, $items-per-page, $count)
	return
		<div class="search_results"> {
			if ($results) then
			    (
			        sdis:query-description($params),
    			    sdis:results-info($params, $end-time - $start-time, $page-info),
    			    for $result at $pos in $results
    			    return search-result($result, ($start - 1 + $pos), $params, $query),
    			    sdis:pagination($params, $page-info)
				)
			else
				<p style="font-size:120%">No results found. Please <a href="search.xqy?{uit:build-querystring($params, ())}">try your search again</a></p>
		} </div>
}

define function search-result(
    $result as node(),
    $position as xs:integer,
    $params as element(params),
    $query as element(search:search-criteria)
    ) as element()
{
	let $uri := xdmp:node-uri($result)
    let $highlight := sdis:highlight($result, $query)
	let $title :=
	    if ($highlight) then
	        $highlight/doc/title/node()
	    else
	        $result/doc/title/node()
	let $date := format-result-date($result/doc/metadata/date)
    return
		<div id="result_{$uri}">
			{if ($position mod 2 = 0) then attribute class {"result alt"} else attribute class {"result"}}
			<div class="header">
				<a href="get-file.xqy?uri={$uri}"><img class="icon" title="View Article" src="images/silk/page.png"/>{" ", $title }</a>
			</div>
			<div class="summary"><strong>Published:</strong> {" ", $date}</div>
			{sdis:create-summary($result, $highlight, $result//html/body/p[1 to 2], fn:true())}
		</div>
}

define function search-facets($params as element()) as element()?
{
    sdis:search-facets($params, $FACETS) (: facet-defs are stored in this variable :)
}

define function search-results-analysis($params as element(params)) as element()*
{
    sdis:search-results-analysis($params, $CLOUD) (: facet-defs are stored in this variable :)
}